package com.customer.demo.utils;

import org.springframework.stereotype.Component;
import java.util.Random;

@Component
public class CibilScoreGenerator {

    private final Random random = new Random();

    public int generateScore() {
        // Generate realistic CIBIL between 650 - 850
        return 650 + random.nextInt(200);
    }
}



package com.customer.demo.utils;

import com.customer.demo.dto.CustomerDTO;
import com.customer.demo.entities.Customer;

public class CustomerMapper {

    private static final String BASE_URL = "http://localhost:8080/api/customers/";

    public static CustomerDTO toDTO(Customer customer) {
        if (customer == null) return null;

        CustomerDTO dto = new CustomerDTO();
        dto.setId(customer.getId());
        dto.setFirstName(customer.getFirstName());
        dto.setMiddleName(customer.getMiddleName());
        dto.setLastName(customer.getLastName());
        dto.setPhone(customer.getPhone());
        dto.setEmail(customer.getEmail());
        dto.setCurrentAddress(customer.getCurrentAddress());
        dto.setPermanentAddress(customer.getPermanentAddress());
        dto.setMaritalStatus(customer.getMaritalStatus());
        dto.setGender(customer.getGender());
        dto.setDateOfBirth(customer.getDateOfBirth());
        dto.setAadhaarNumber(customer.getAadhaarNumber());
        dto.setPanNumber(customer.getPanNumber());
        dto.setPassportNumber(customer.getPassportNumber());
        dto.setFatherName(customer.getFatherName());
        dto.setEducation(customer.getEducation());

        // ‚úÖ Now check if path strings exist instead of byte[]
        dto.setHasIdProof(customer.getIdentityProofPath() != null && !customer.getIdentityProofPath().isEmpty());
        dto.setHasAddressProof(customer.getAddressProofPath() != null && !customer.getAddressProofPath().isEmpty());

        // ‚úÖ Generate accessible URLs for frontend
        if (customer.getId() != null) {
            String id = customer.getId().toString();
            dto.setIdProofUrl(BASE_URL + id + "/document/ID_PROOF");
            dto.setAddressProofUrl(BASE_URL + id + "/document/ADDRESS_PROOF");
        }

        return dto;
    }
}


package com.customer.demo.utils;

import org.springframework.stereotype.Component;
import java.time.LocalDate;
import java.time.Period;

@Component
public class DateUtils {

    public int calculateAge(LocalDate dob) {
        if (dob == null) return 0;
        return Period.between(dob, LocalDate.now()).getYears();
    }
}



package com.customer.demo.utils;

import org.springframework.web.multipart.MultipartFile;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.*;

public class FileStorageUtil {

    public static String saveFile(MultipartFile file, String uploadDir, String fileName) throws IOException {
        // Always create directories under the central "uploads" folder in your project root
        Path baseDir = Paths.get("uploads").resolve(uploadDir);

        if (!Files.exists(baseDir)) {
            Files.createDirectories(baseDir);
        }

        Path filePath = baseDir.resolve(fileName);
        try (FileOutputStream fos = new FileOutputStream(filePath.toFile())) {
            fos.write(file.getBytes());
        }

        System.out.println("üìÅ File stored at: " + filePath.toAbsolutePath());

        // ‚úÖ Store only relative path (so Spring can map via WebConfig)
        return "uploads/" + uploadDir.replace("\\", "/") + "/" + fileName;
    }
}



package com.customer.demo.utils;

import com.customer.demo.entities.Notification;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.stereotype.Component;

@Component
public class NotificationUtils {

    public List<Notification> filterUnread(List<Notification> notifications) {
        return notifications.stream()
                .filter(n -> !n.isReadStatus())
                .collect(Collectors.toList());
    }

    public String formatMessage(String message, String role) {
        return "[" + role.toUpperCase() + "] " + message;
    }
}




# ===============================
# Database Configuration
# ===============================
spring.datasource.url=jdbc:postgresql://localhost:5432/loana
spring.datasource.username=postgres
spring.datasource.password=Alam@123

# ===============================
# JPA / Hibernate Configuration
# ===============================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.security.user.name=admin
spring.security.user.password=admin123

# Allow larger file uploads
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB

# Optional: enable multipart handling
spring.servlet.multipart.enabled=true





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <!-- ‚úÖ Only ONE parent -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.2</version>
        <relativePath/> <!-- lookup parent from the repository -->
    </parent>

    <groupId>com.customer</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Loan Origination System</name>
    <description>Loan Origination System with Maker-Checker Flow</description>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>

        <!-- üåê Spring Boot Web (Controllers, REST APIs) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- üóÉÔ∏è Spring Data JPA (for Entities & Repositories) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- üîê Spring Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- üíæ PostgreSQL Database Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- üß∞ Lombok (simplify getters/setters) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.32</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- üß† Swagger / OpenAPI UI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>

        <!-- üîê JSON Web Token (JWT) Dependencies -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>

        <!-- üß™ Spring Boot Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- ‚úÖ JJWT (Java JWT) -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <!-- ‚öôÔ∏è Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>










